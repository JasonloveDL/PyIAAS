window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "pyIAAS", "modulename": "pyIAAS", "kind": "module", "doc": "<p>pyIAAS: Software for Multivariate Time-series Forecasting Model Development with an Intelligent Automated NAS optimization framework</p>\n\n<h1 id=\"what-is-pyiaas\">What is pyIAAS?</h1>\n\n<p>pyIAAS is an open-source Python package that exploits one of the latest neural architecture search (NAS) frameworks, intelligent automated achitecture search (IAAS) (Yang et al. 2022), for the multivariate time-series forecasting (MTF) model development. The aim of the pyIAAS is to facilitate the future researchers in building a high-quality MTF model efficiently and effectively when considering the optimality of the network structures. pyIAAS contains four network modules as searching candidates, namley, convolutional neural networks (CNN), recurrent neural networks (RNN), long-short term memory (LSTM) neural networks and fully connected neural networks (FCN). During the searching process, reinforcement learning (RL) based meta-controllers are designed to sequentially make decisions to update the network structures. Please refer to <a href=\"https://arxiv.org/abs/2203.13563\">Yang et al. (2022)</a> for more detailed information about the IAAS framework.</p>\n\n<h1 id=\"installation\">Installation</h1>\n\n<h3 id=\"without-gpu-acceleration\">Without GPU acceleration</h3>\n\n<p>In an environment 3.8+, pyIAAS can be installed via</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>pip install pyIAAS\n</code></pre>\n</div>\n\n<h3 id=\"with-gpu-acceleration\">With GPU acceleration</h3>\n\n<p>First, install the GPU version of PyTorch</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>pip3 install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu113 \n</code></pre>\n</div>\n\n<p>For more information of  PyTorch, please check <a href=\"https://pytorch.org/get-started/locally/\">this</a></p>\n\n<p>Then, install the pyIAAS package</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>pip install pyIAAS\n</code></pre>\n</div>\n\n<h1 id=\"usage-of-pyiaas\">Usage of pyIAAS</h1>\n\n<h2 id=\"command-line\">Command line</h2>\n\n<p>Command line tool supplies two functions: search and predict</p>\n\n<p>To search networks given a dataset (use the example in example/1. basic)</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># Start the searching process of pyIAAS</span>\npyIAAS search -c NASConfig.json -f VT_summer.csv -t RT_Demand\n</code></pre>\n</div>\n\n<p>Note that the output directory should be empty!</p>\n\n<p>After the searching process, the neural architectures are stored in the directory <code>examples/1. basic/out_dir</code></p>\n\n<p>To predict with the best searched model</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># Perform a prediction task given a dataset VT_summer_predict.csv</span>\npyIAAS predict -c NASConfig.json -f VT_summer_predict.csv -t RT_Demand -d out_dir -o prediction.csv\n</code></pre>\n</div>\n\n<h2 id=\"python-api\">Python API</h2>\n\n<p>To search the neural architectures, then perform a prediction task with the best searched model</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">pyIAAS</span>\n\n<span class=\"c1\"># set the basic information of the searching process</span>\n<span class=\"n\">config_file</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;NASConfig.json&#39;</span>\n<span class=\"n\">input_file</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;VT_summer.csv&#39;</span>\n<span class=\"n\">target_name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;RT_Demand&#39;</span>\n<span class=\"n\">test_ratio</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span>  <span class=\"c1\"># the proportion of the test dataset in the whole dataset. It can be adjusted by users themself for specific tasks</span>\n\n<span class=\"c1\"># start the searching process</span>\n<span class=\"n\">pyIAAS</span><span class=\"o\">.</span><span class=\"n\">run_search</span><span class=\"p\">(</span><span class=\"n\">config_file</span><span class=\"p\">,</span> <span class=\"n\">input_file</span><span class=\"p\">,</span> <span class=\"n\">target_name</span><span class=\"p\">,</span> <span class=\"n\">test_ratio</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set the basic information of a prediction task</span>\n<span class=\"n\">config_file</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;NASConfig.json&#39;</span>\n<span class=\"n\">input_file</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;VT_summer.csv&#39;</span>\n<span class=\"n\">target_name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;RT_Demand&#39;</span>\n<span class=\"n\">output_dir</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;out_dir&#39;</span>\n<span class=\"n\">prediction_file</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;VT_summer_predict.csv&#39;</span>\n\n<span class=\"c1\"># perform the predicting task in VT_summer_predict.csv</span>\n<span class=\"n\">pyIAAS</span><span class=\"o\">.</span><span class=\"n\">run_predict</span><span class=\"p\">(</span><span class=\"n\">config_file</span><span class=\"p\">,</span> <span class=\"n\">input_file</span><span class=\"p\">,</span> <span class=\"n\">target_name</span><span class=\"p\">,</span> <span class=\"n\">output_dir</span><span class=\"p\">,</span> <span class=\"n\">prediction_file</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h2 id=\"output-file-explanations\">Output file explanations</h2>\n\n<ul>\n<li>model.db: detailed records of all searched models</li>\n<li>each searched model contains:\n<ul>\n<li>prediction results of the test dataset</li>\n<li>transformation table</li>\n<li>model parameters of type <code>.pth</code></li>\n<li>training loss curve </li>\n</ul></li>\n</ul>\n\n<h2 id=\"customized-module-list\">Customized module list</h2>\n\n<p>The modules used in the searching process is given in the configuration\nfile. The default configuration is </p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;MaxLayers&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;timeLength&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">168</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;predictLength&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;IterationEachTime&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;MonitorIterations&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">40</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;NetPoolSize&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;BATCH_SIZE&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;EPISODE&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">200</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;GPU&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;OUT_DIR&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;out_dir&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;Modules&quot;</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;dense&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">&quot;out_range&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">48</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">108</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">144</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">&quot;editable&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;rnn&quot;</span><span class=\"p\">:{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">&quot;out_range&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">48</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">108</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">144</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">&quot;editable&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;lstm&quot;</span><span class=\"p\">:{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">&quot;out_range&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">48</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">108</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">144</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">&quot;editable&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;conv&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">&quot;out_range&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">48</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">108</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">144</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">&quot;editable&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre>\n</div>\n\n<p>The meaning of each term:</p>\n\n<ul>\n<li>MaxLayers : number of the maximum layers of the searched neural architecture</li>\n<li>timeLength : length of the input time-series data</li>\n<li>predictLength : prediction time length, e.g., two-hour ahead</li>\n<li>IterationEachTime : number of the training epochs at each searching episode</li>\n<li>MonitorIterations : epoch interval to print out the training information, e.g., training loss </li>\n<li>NetPoolSize : size of the net pool</li>\n<li>BATCH_SIZE : batch size used in the training process</li>\n<li>EPISODE : searching times of the reinforcement learning actors</li>\n<li>Pruning : enable pruning functionality during search (Pruning implementation inspired by <a href=\"https://github.com/huggingface/nn_pruning\">Movement Pruning</a>)</li>\n<li>PruningRatio : pruning ratio(topV strategy used here)</li>\n<li>GPU : use GPU or not; if true, the environment should use the GPU version of PyTorch</li>\n<li>OUT_DIR : output directory</li>\n<li>Modules : module information \n<ul>\n<li>out_range : list of the output unit number </li>\n<li>editable : whether this module can be widened or not</li>\n</ul></li>\n</ul>\n\n<h2 id=\"extending-new-module\">Extending new module</h2>\n\n<p>To create a new module, users should create a subclass of <code>pyIAAS.model.module.NasModule</code>, and implement \nthese reserved abstract functions</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyIAAS.model.module</span> <span class=\"kn\">import</span> <span class=\"n\">NasModule</span>\n<span class=\"c1\"># this is a sample subclassing of NasModule  to</span>\n<span class=\"c1\"># illustrate how to customize a new module in the pyIAAS package</span>\n<span class=\"k\">class</span> <span class=\"nc\">NewModule</span><span class=\"p\">(</span><span class=\"n\">NasModule</span><span class=\"p\">):</span>\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_max_level</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># return: True if this module reaches the max width level, False otherwise</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">next_level</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># return: width of next level</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">init_param</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">input_shape</span><span class=\"p\">):</span>\n        <span class=\"c1\"># initialize the parameters of this module</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_param_end</span><span class=\"p\">(</span><span class=\"n\">input_shape</span><span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">identity_module</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cfg</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">input_shape</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">):</span>\n        <span class=\"c1\"># generate an identity mapping module</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_module_instance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># generate a model instance once and use it for the rest procedures</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">token</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># return: string type token of this module</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">perform_wider_transformation_current</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># generate a new wider module by the wider function-preserving transformation</span>\n        <span class=\"c1\"># this function is called by layer i and returns the realized random mapping to the IAAS framework for the next layer&#39;s wider transformation.</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">perform_wider_transformation_next</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mapping_g</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"n\">scale_g</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n        <span class=\"c1\"># generate a new wider module by the wider function-preserving transformation</span>\n        <span class=\"c1\"># this function is called by the layer i + 1</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>Add the module information to the configuration file as follows</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;MaxLayers&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;timeLength&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">168</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;predictLength&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;IterationEachTime&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;MonitorIterations&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">40</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;NetPoolSize&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;BATCH_SIZE&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;EPISODE&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">200</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;GPU&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;OUT_DIR&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;out_dir&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;Modules&quot;</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;dense&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">&quot;out_range&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">48</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">108</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">144</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">&quot;editable&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;new_module&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">&quot;out_range&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">48</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">108</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">144</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">&quot;editable&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre>\n</div>\n\n<p>Register this new module in the running code</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyIAAS</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">new_module</span> <span class=\"kn\">import</span> <span class=\"n\">NewModule</span>\n<span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">(</span><span class=\"s1\">&#39;NASConfig.json&#39;</span><span class=\"p\">)</span>\n<span class=\"c1\"># register a new module to the global configuration</span>\n<span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">register_module</span><span class=\"p\">(</span><span class=\"s1\">&#39;new_module&#39;</span><span class=\"p\">,</span> <span class=\"n\">NewModule</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h1 id=\"additional-information\">Additional information</h1>\n\n<p>For more details of this algorithm, see <a href=\"https://arxiv.org/abs/2203.13563\">Yang et al. (2022)</a></p>\n\n<p>For more details of pyIAAS, see <a href=\"https://jasonlovedl.github.io/pyIAAS/pyIAAS.html\">doc</a></p>\n\n<p>Repository is <a href=\"https://github.com/JasonloveDL/pyIAAS\">here</a></p>\n"}, {"fullname": "pyIAAS.agent", "modulename": "pyIAAS.agent", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyIAAS.agent.Agent", "modulename": "pyIAAS.agent.Agent", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyIAAS.agent.Agent.Agent", "modulename": "pyIAAS.agent.Agent", "qualname": "Agent", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pyIAAS.agent.Agent.Agent.__init__", "modulename": "pyIAAS.agent.Agent", "qualname": "Agent.__init__", "kind": "function", "doc": "<p>Agent class to do action on neural networks.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cfg</strong>:  global configuration</li>\n<li><strong>input_size</strong>:  input size of encoder network, embedding vector length</li>\n<li><strong>hidden_size</strong>:  output of encoder networks</li>\n<li><strong>max_layers</strong>:  maximum networks layers</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span>, </span><span class=\"param\"><span class=\"n\">input_size</span>, </span><span class=\"param\"><span class=\"n\">hidden_size</span>, </span><span class=\"param\"><span class=\"n\">max_layers</span></span>)</span>"}, {"fullname": "pyIAAS.agent.Agent.Agent.to_cuda", "modulename": "pyIAAS.agent.Agent", "qualname": "Agent.to_cuda", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.agent.Agent.Agent.to_cpu", "modulename": "pyIAAS.agent.Agent", "qualname": "Agent.to_cpu", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.agent.Agent.Agent.get_action", "modulename": "pyIAAS.agent.Agent", "qualname": "Agent.get_action", "kind": "function", "doc": "<p>make decision on each state.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>states</strong>:  state list</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>action of each state</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">states</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.agent.Agent.Agent.update", "modulename": "pyIAAS.agent.Agent", "qualname": "Agent.update", "kind": "function", "doc": "<p>update agent actor networks by each reward comes from previous action todo change update method</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>replay_memory</strong>:  trajectories and replay memory</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">replay_memory</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.agent.Agent.Agent.save", "modulename": "pyIAAS.agent.Agent", "qualname": "Agent.save", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.agent.Agent.Agent.try_load", "modulename": "pyIAAS.agent.Agent", "qualname": "Agent.try_load", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span>, </span><span class=\"param\"><span class=\"n\">logger</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.agent.Agent.action_describe", "modulename": "pyIAAS.agent.Agent", "qualname": "action_describe", "kind": "function", "doc": "<p>return a readable action description string</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cfg</strong>:  global configuration</li>\n<li><strong>action</strong>:  action detail information</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>readable action description string</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span>, </span><span class=\"param\"><span class=\"n\">action</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.agent.components", "modulename": "pyIAAS.agent.components", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyIAAS.agent.components.Vocabulary", "modulename": "pyIAAS.agent.components", "qualname": "Vocabulary", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pyIAAS.agent.components.Vocabulary.__init__", "modulename": "pyIAAS.agent.components", "qualname": "Vocabulary.__init__", "kind": "function", "doc": "<p>store embedding code of each NAS module</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">token_list</span></span>)</span>"}, {"fullname": "pyIAAS.agent.components.Vocabulary.get_code", "modulename": "pyIAAS.agent.components", "qualname": "Vocabulary.get_code", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">token_list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.agent.components.Vocabulary.get_token", "modulename": "pyIAAS.agent.components", "qualname": "Vocabulary.get_token", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">code_list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.agent.components.get_vocabulary", "modulename": "pyIAAS.agent.components", "qualname": "get_vocabulary", "kind": "function", "doc": "<p>create vocabulary for all search module.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>modules_config</strong>:  modules information, dict</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>vocabulary of search modules.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">modules_config</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.agent.components.EncoderNet", "modulename": "pyIAAS.agent.components", "qualname": "EncoderNet", "kind": "class", "doc": "<p>Encoder network similar to EAS</p>\n", "bases": "torch.nn.modules.module.Module"}, {"fullname": "pyIAAS.agent.components.EncoderNet.__init__", "modulename": "pyIAAS.agent.components", "qualname": "EncoderNet.__init__", "kind": "function", "doc": "<p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_size</span>, </span><span class=\"param\"><span class=\"n\">hidden_size</span>, </span><span class=\"param\"><span class=\"n\">cfg</span></span>)</span>"}, {"fullname": "pyIAAS.agent.components.EncoderNet.embedding", "modulename": "pyIAAS.agent.components", "qualname": "EncoderNet.embedding", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">token_list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.agent.components.EncoderNet.forward", "modulename": "pyIAAS.agent.components", "qualname": "EncoderNet.forward", "kind": "function", "doc": "<p>get encoder output</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>token_list: list of token</strong>:  list of str</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>output, (h_n, c_n) as described in lstm</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">token_list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.agent.components.WinderActorNet", "modulename": "pyIAAS.agent.components", "qualname": "WinderActorNet", "kind": "class", "doc": "<p>Base class for all neural network modules.</p>\n\n<p>Your models should also subclass this class.</p>\n\n<p>Modules can also contain other Modules, allowing to nest them in\na tree structure. You can assign the submodules as regular attributes::</p>\n\n<pre><code>import torch.nn as nn\nimport torch.nn.functional as F\n\nclass Model(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(1, 20, 5)\n        self.conv2 = nn.Conv2d(20, 20, 5)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        return F.relu(self.conv2(x))\n</code></pre>\n\n<p>Submodules assigned in this way will be registered, and will have their\nparameters converted too when you call <code>to()</code>, etc.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>As per the example above, an <code>__init__()</code> call to the parent class\nmust be made before assignment on the child.</p>\n\n</div>\n\n<p>:ivar training: Boolean represents whether this module is in training or\n                evaluation mode.\n:vartype training: bool</p>\n", "bases": "torch.nn.modules.module.Module"}, {"fullname": "pyIAAS.agent.components.WinderActorNet.__init__", "modulename": "pyIAAS.agent.components", "qualname": "WinderActorNet.__init__", "kind": "function", "doc": "<p>wider actor to do widening action</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cfg</strong>:  global configuration</li>\n<li><strong>input_size</strong>:  input data size, determined by encoder output size</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span>, </span><span class=\"param\"><span class=\"n\">input_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "pyIAAS.agent.components.WinderActorNet.forward", "modulename": "pyIAAS.agent.components", "qualname": "WinderActorNet.forward", "kind": "function", "doc": "<p>Defines the computation performed at every call.</p>\n\n<p>Should be overridden by all subclasses.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>Although the recipe for forward pass needs to be defined within\nthis function, one should call the <code>Module</code> instance afterwards\ninstead of this since the former takes care of running the\nregistered hooks while the latter silently ignores them.</p>\n\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">features</span>, </span><span class=\"param\"><span class=\"n\">editable</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.agent.components.WinderActorNet.get_action", "modulename": "pyIAAS.agent.components", "qualname": "WinderActorNet.get_action", "kind": "function", "doc": "<p>get output of wider actor network</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>features</strong>:  hidden states of each network module</li>\n<li><strong>editable</strong>:  indicating if a layer can be widened</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>index of layer to be widened</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">features</span>, </span><span class=\"param\"><span class=\"n\">editable</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.agent.components.DeeperActorNet", "modulename": "pyIAAS.agent.components", "qualname": "DeeperActorNet", "kind": "class", "doc": "<p>Base class for all neural network modules.</p>\n\n<p>Your models should also subclass this class.</p>\n\n<p>Modules can also contain other Modules, allowing to nest them in\na tree structure. You can assign the submodules as regular attributes::</p>\n\n<pre><code>import torch.nn as nn\nimport torch.nn.functional as F\n\nclass Model(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(1, 20, 5)\n        self.conv2 = nn.Conv2d(20, 20, 5)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        return F.relu(self.conv2(x))\n</code></pre>\n\n<p>Submodules assigned in this way will be registered, and will have their\nparameters converted too when you call <code>to()</code>, etc.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>As per the example above, an <code>__init__()</code> call to the parent class\nmust be made before assignment on the child.</p>\n\n</div>\n\n<p>:ivar training: Boolean represents whether this module is in training or\n                evaluation mode.\n:vartype training: bool</p>\n", "bases": "torch.nn.modules.module.Module"}, {"fullname": "pyIAAS.agent.components.DeeperActorNet.__init__", "modulename": "pyIAAS.agent.components", "qualname": "DeeperActorNet.__init__", "kind": "function", "doc": "<p>deeper net actor net for make decision on deeper the original neural network</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cfg</strong>:  global configuration</li>\n<li><strong>input_size</strong>:  hidden size of encoder network (including bidirectional enlargement of size)</li>\n<li><strong>max_layers</strong>:  maximum layer number of neural network</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span>, </span><span class=\"param\"><span class=\"n\">input_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">max_layers</span></span>)</span>"}, {"fullname": "pyIAAS.agent.components.DeeperActorNet.get_action", "modulename": "pyIAAS.agent.components", "qualname": "DeeperActorNet.get_action", "kind": "function", "doc": "<p>get output of deeper actor network</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>hn_feature</strong>:  last hidden states of encoder network</li>\n<li><strong>insert_length</strong>:  max index of the inserted neural layer</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>(insert_type, insert_index), (insert_type_policy, insert_index_policy),(insert_type_Q, insert_index_Q), (insert_type_V, insert_index_V)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">hn_feature</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">insert_length</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.agent.components.SelectorActorNet", "modulename": "pyIAAS.agent.components", "qualname": "SelectorActorNet", "kind": "class", "doc": "<p>Base class for all neural network modules.</p>\n\n<p>Your models should also subclass this class.</p>\n\n<p>Modules can also contain other Modules, allowing to nest them in\na tree structure. You can assign the submodules as regular attributes::</p>\n\n<pre><code>import torch.nn as nn\nimport torch.nn.functional as F\n\nclass Model(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(1, 20, 5)\n        self.conv2 = nn.Conv2d(20, 20, 5)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        return F.relu(self.conv2(x))\n</code></pre>\n\n<p>Submodules assigned in this way will be registered, and will have their\nparameters converted too when you call <code>to()</code>, etc.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>As per the example above, an <code>__init__()</code> call to the parent class\nmust be made before assignment on the child.</p>\n\n</div>\n\n<p>:ivar training: Boolean represents whether this module is in training or\n                evaluation mode.\n:vartype training: bool</p>\n", "bases": "torch.nn.modules.module.Module"}, {"fullname": "pyIAAS.agent.components.SelectorActorNet.__init__", "modulename": "pyIAAS.agent.components", "qualname": "SelectorActorNet.__init__", "kind": "function", "doc": "<p>selector network, output is 4 dimension:\n4 dim:\n(do nothing, wider, deeper, prune)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cfg</strong>:  global configuration</li>\n<li><strong>input_size</strong>:  input data size, determined by encoder output size</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span>, </span><span class=\"param\"><span class=\"n\">input_size</span></span>)</span>"}, {"fullname": "pyIAAS.agent.components.SelectorActorNet.forward", "modulename": "pyIAAS.agent.components", "qualname": "SelectorActorNet.forward", "kind": "function", "doc": "<p>Defines the computation performed at every call.</p>\n\n<p>Should be overridden by all subclasses.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>Although the recipe for forward pass needs to be defined within\nthis function, one should call the <code>Module</code> instance afterwards\ninstead of this since the former takes care of running the\nregistered hooks while the latter silently ignores them.</p>\n\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.agent.components.SelectorActorNet.get_action", "modulename": "pyIAAS.agent.components", "qualname": "SelectorActorNet.get_action", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.agent.memory", "modulename": "pyIAAS.agent.memory", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyIAAS.agent.memory.Transition", "modulename": "pyIAAS.agent.memory", "qualname": "Transition", "kind": "class", "doc": "<p>Transition(state, action, reward, policy)</p>\n", "bases": "builtins.tuple"}, {"fullname": "pyIAAS.agent.memory.Transition.__init__", "modulename": "pyIAAS.agent.memory", "qualname": "Transition.__init__", "kind": "function", "doc": "<p>Create new instance of Transition(state, action, reward, policy)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">action</span>, </span><span class=\"param\"><span class=\"n\">reward</span>, </span><span class=\"param\"><span class=\"n\">policy</span></span>)</span>"}, {"fullname": "pyIAAS.agent.memory.Transition.state", "modulename": "pyIAAS.agent.memory", "qualname": "Transition.state", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n"}, {"fullname": "pyIAAS.agent.memory.Transition.action", "modulename": "pyIAAS.agent.memory", "qualname": "Transition.action", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n"}, {"fullname": "pyIAAS.agent.memory.Transition.reward", "modulename": "pyIAAS.agent.memory", "qualname": "Transition.reward", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n"}, {"fullname": "pyIAAS.agent.memory.Transition.policy", "modulename": "pyIAAS.agent.memory", "qualname": "Transition.policy", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n"}, {"fullname": "pyIAAS.agent.memory.Trajectory", "modulename": "pyIAAS.agent.memory", "qualname": "Trajectory", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pyIAAS.agent.memory.Trajectory.append", "modulename": "pyIAAS.agent.memory", "qualname": "Trajectory.append", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">action</span>, </span><span class=\"param\"><span class=\"n\">reward</span>, </span><span class=\"param\"><span class=\"n\">policy</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.agent.memory.ReplayMemory", "modulename": "pyIAAS.agent.memory", "qualname": "ReplayMemory", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pyIAAS.agent.memory.ReplayMemory.get_update_memory", "modulename": "pyIAAS.agent.memory", "qualname": "ReplayMemory.get_update_memory", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">max_len</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.agent.memory.ReplayMemory.record_trajectory", "modulename": "pyIAAS.agent.memory", "qualname": "ReplayMemory.record_trajectory", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_pool_trajectory</span>, </span><span class=\"param\"><span class=\"n\">finished_trajectory</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.agent.memory.ReplayMemory.save_memories", "modulename": "pyIAAS.agent.memory", "qualname": "ReplayMemory.save_memories", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">save_dir</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.agent.memory.ReplayMemory.load_memories", "modulename": "pyIAAS.agent.memory", "qualname": "ReplayMemory.load_memories", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">save_dir</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.agent.memory.recursive_tensor_detach", "modulename": "pyIAAS.agent.memory", "qualname": "recursive_tensor_detach", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.env", "modulename": "pyIAAS.env", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyIAAS.env.NasEnv", "modulename": "pyIAAS.env.NasEnv", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyIAAS.env.NasEnv.NasEnv", "modulename": "pyIAAS.env.NasEnv", "qualname": "NasEnv", "kind": "class", "doc": "<p>The main OpenAI Gym class.</p>\n\n<p>It encapsulates an environment with arbitrary behind-the-scenes dynamics.\nAn environment can be partially or fully observed.</p>\n\n<p>The main API methods that users of this class need to know are:</p>\n\n<ul>\n<li><code>step()</code> - Takes a step in the environment using an action returning the next observation, reward,\nif the environment terminated and observation information.</li>\n<li><code>reset()</code> - Resets the environment to an initial state, returning the initial observation and observation information.</li>\n<li><code>render()</code> - Renders the environment observation with modes depending on the output</li>\n<li><code>close()</code> - Closes the environment, important for rendering where pygame is imported</li>\n</ul>\n\n<p>And set the following attributes:</p>\n\n<ul>\n<li><code>action_space</code> - The Space object corresponding to valid actions</li>\n<li><code>observation_space</code> - The Space object corresponding to valid observations</li>\n<li><code>reward_range</code> - A tuple corresponding to the minimum and maximum possible rewards</li>\n<li><code>spec</code> - An environment spec that contains the information used to initialise the environment from <code>gym.make</code></li>\n<li><code>metadata</code> - The metadata of the environment, i.e. render modes</li>\n<li><code>np_random</code> - The random number generator for the environment</li>\n</ul>\n\n<p>Note: a default reward range set to \\( (-\\infty,+\\infty) \\) already exists. Set it if you want a narrower range.</p>\n", "bases": "typing.Generic[~ObsType, ~ActType]"}, {"fullname": "pyIAAS.env.NasEnv.NasEnv.__init__", "modulename": "pyIAAS.env.NasEnv", "qualname": "NasEnv.__init__", "kind": "function", "doc": "<p>NAS environment , the NAS search action and evaluation is in this class.\n@param pool_size:\n@param train_test_data:  (X_train, y_train, X_test, y_test), for input X, the dimension should be\n(batch, feature, time)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span>, </span><span class=\"param\"><span class=\"n\">pool_size</span>, </span><span class=\"param\"><span class=\"n\">train_test_data</span></span>)</span>"}, {"fullname": "pyIAAS.env.NasEnv.NasEnv.step", "modulename": "pyIAAS.env.NasEnv", "qualname": "NasEnv.step", "kind": "function", "doc": "<p>do the actions given by agent and train the networks in pool, then drop low performance networks.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>replay_memory</strong>:  memory to store trajectories</li>\n<li><strong>action</strong>:  action given by agent</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>observation, reward, done, info</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.env.NasEnv.NasEnv.performance", "modulename": "pyIAAS.env.NasEnv", "qualname": "NasEnv.performance", "kind": "function", "doc": "<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>average performance in the net pool</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.env.NasEnv.NasEnv.top_performance", "modulename": "pyIAAS.env.NasEnv", "qualname": "NasEnv.top_performance", "kind": "function", "doc": "<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>best performance in the net pool</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.env.NasEnv.NasEnv.get_reward", "modulename": "pyIAAS.env.NasEnv", "qualname": "NasEnv.get_reward", "kind": "function", "doc": "<p>calculate reward for each network</p>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.env.NasEnv.NasEnv.reset", "modulename": "pyIAAS.env.NasEnv", "qualname": "NasEnv.reset", "kind": "function", "doc": "<p>reset all net to random init, this should call once in whole program\ntrain one round before return netpool</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>net pool containing all network under searching</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.env.NasEnv.NasEnv.get_state", "modulename": "pyIAAS.env.NasEnv", "qualname": "NasEnv.get_state", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.env.NasEnv.NasEnv.render", "modulename": "pyIAAS.env.NasEnv", "qualname": "NasEnv.render", "kind": "function", "doc": "<p>save network to dist</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mode</strong>:  inherent from super, not used here</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;human&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.env.NasEnv.NasEnv.save", "modulename": "pyIAAS.env.NasEnv", "qualname": "NasEnv.save", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.env.NasEnv.NasEnv.try_load", "modulename": "pyIAAS.env.NasEnv", "qualname": "NasEnv.try_load", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span>, </span><span class=\"param\"><span class=\"n\">logger</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.env.NasEnv.NasEnv.generate_random_net", "modulename": "pyIAAS.env.NasEnv", "qualname": "NasEnv.generate_random_net", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model", "modulename": "pyIAAS.model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyIAAS.model.model", "modulename": "pyIAAS.model.model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyIAAS.model.model.reset_model_count", "modulename": "pyIAAS.model.model", "qualname": "reset_model_count", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.model.ModelConfig", "modulename": "pyIAAS.model.model", "qualname": "ModelConfig", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pyIAAS.model.model.ModelConfig.__init__", "modulename": "pyIAAS.model.model", "qualname": "ModelConfig.__init__", "kind": "function", "doc": "<p>model configuration class, containing model structure information and another static information</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cfg</strong>:  global configuration</li>\n<li><strong>modules</strong>:  list of modules</li>\n<li><strong>feature_shape</strong>:  input feature shape</li>\n<li><strong>target_shape</strong>:  target tensor shape</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span>, </span><span class=\"param\"><span class=\"n\">modules</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">feature_shape</span>, </span><span class=\"param\"><span class=\"n\">target_shape</span></span>)</span>"}, {"fullname": "pyIAAS.model.model.ModelConfig.insert_length", "modulename": "pyIAAS.model.model", "qualname": "ModelConfig.insert_length", "kind": "variable", "doc": "<p>insert new layer length avalible, used in deeper actor</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>int</p>\n</blockquote>\n"}, {"fullname": "pyIAAS.model.model.ModelConfig.generate_model", "modulename": "pyIAAS.model.model", "qualname": "ModelConfig.generate_model", "kind": "function", "doc": "<p>generate a new NasModel from scratch, all NasModel trainable parameters is randomly generated</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>NAS_Module</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.model.NasModel", "modulename": "pyIAAS.model.model", "qualname": "NasModel", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pyIAAS.model.model.NasModel.__init__", "modulename": "pyIAAS.model.model", "qualname": "NasModel.__init__", "kind": "function", "doc": "<p>NAS model class, this class representing running instance of a neural network and we can do wider and deeper transformation\nin this class</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cfg</strong>:  global configuration file</li>\n<li><strong>model_instance</strong>:  model instance of type torch.nn.Module</li>\n<li><strong>model_config</strong>:  model configuration class</li>\n<li><strong>prev_index</strong>:  previous netowrk index</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cfg</span>,</span><span class=\"param\">\t<span class=\"n\">model_instance</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span>,</span><span class=\"param\">\t<span class=\"n\">model_config</span><span class=\"p\">:</span> <span class=\"n\">pyIAAS</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">ModelConfig</span>,</span><span class=\"param\">\t<span class=\"n\">train_times</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">prev_index</span><span class=\"o\">=-</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">prev_flops</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pyIAAS.model.model.NasModel.predict", "modulename": "pyIAAS.model.model", "qualname": "NasModel.predict", "kind": "function", "doc": "<p>predict target value based on input</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input</strong>:  input tensor , features</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>preidction</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">input</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.model.NasModel.to_cuda", "modulename": "pyIAAS.model.model", "qualname": "NasModel.to_cuda", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.model.NasModel.to_cpu", "modulename": "pyIAAS.model.model", "qualname": "NasModel.to_cpu", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.model.NasModel.add_transformation_record", "modulename": "pyIAAS.model.model", "qualname": "NasModel.add_transformation_record", "kind": "function", "doc": "<p>add a transformation record.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>prev</strong>:  index of previous model</li>\n<li><strong>current</strong>:  index of current model</li>\n<li><strong>train_times</strong>:  train times of prevous model</li>\n<li><strong>loss_list</strong>:  loss list information</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">prev</span>, </span><span class=\"param\"><span class=\"n\">current</span>, </span><span class=\"param\"><span class=\"n\">train_times</span>, </span><span class=\"param\"><span class=\"n\">loss_list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.model.NasModel.update_global_information", "modulename": "pyIAAS.model.model", "qualname": "NasModel.update_global_information", "kind": "function", "doc": "<p>update information in SQLite.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.model.NasModel.update_pool_state", "modulename": "pyIAAS.model.model", "qualname": "NasModel.update_pool_state", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_pool</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.model.NasModel.train", "modulename": "pyIAAS.model.model", "qualname": "NasModel.train", "kind": "function", "doc": "<p>train NasModel directly(without batch), all feature make forward computation at once</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X_train</strong>:  train hn_feature</li>\n<li><strong>y_train</strong>:  train targets</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">y_train</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.model.NasModel.test", "modulename": "pyIAAS.model.model", "qualname": "NasModel.test", "kind": "function", "doc": "<p>test this network in test data. all result stored in member variable</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X_test</strong>:  input features</li>\n<li><strong>y_test</strong>:  target value</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.model.NasModel.perform_wider_transformation", "modulename": "pyIAAS.model.model", "qualname": "NasModel.perform_wider_transformation", "kind": "function", "doc": "<p>generate a new NasModel by widen the specific layer\nthe widen method follows Net2Net(arXiv:1511.05641)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>wider_index</strong>:  index of layer to widen</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>new NasModel with the widen layer</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">wider_index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.model.NasModel.perform_deeper_transformation", "modulename": "pyIAAS.model.model", "qualname": "NasModel.perform_deeper_transformation", "kind": "function", "doc": "<p>generate a new NasModel by insert a new layer\nthe deeper method follows Net2Net(arXiv:1511.05641)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>deeper_action</strong>:  (insert layer type, insert layer place)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>new NasModel with deeper layers</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">deeper_action</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.model.NasModel.save_pred_result", "modulename": "pyIAAS.model.model", "qualname": "NasModel.save_pred_result", "kind": "function", "doc": "<p>save prediction result to disk</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X_test</strong>:  input features</li>\n<li><strong>y_test</strong>:  target value</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_test</span>, </span><span class=\"param\"><span class=\"n\">model_dir</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.model.NasModel.save_model", "modulename": "pyIAAS.model.model", "qualname": "NasModel.save_model", "kind": "function", "doc": "<p>save model parameters and additional information of this netowrk to disk</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_dir</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.model.NasModel.prune", "modulename": "pyIAAS.model.model", "qualname": "NasModel.prune", "kind": "function", "doc": "<p>Prune structure by importance score.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>new NasModel with deeper layers</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.model.NasModel.mape", "modulename": "pyIAAS.model.model", "qualname": "NasModel.mape", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pred</span>, </span><span class=\"param\"><span class=\"n\">truth</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.model.NasModel.mae", "modulename": "pyIAAS.model.model", "qualname": "NasModel.mae", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pred</span>, </span><span class=\"param\"><span class=\"n\">truth</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.model.NasModel.rmse", "modulename": "pyIAAS.model.model", "qualname": "NasModel.rmse", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pred</span>, </span><span class=\"param\"><span class=\"n\">truth</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.model.NasModel.max_rmse", "modulename": "pyIAAS.model.model", "qualname": "NasModel.max_rmse", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pred</span>, </span><span class=\"param\"><span class=\"n\">truth</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.model.NasModel.mix_rmse", "modulename": "pyIAAS.model.model", "qualname": "NasModel.mix_rmse", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pred</span>, </span><span class=\"param\"><span class=\"n\">truth</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.model.generate_new_model_config", "modulename": "pyIAAS.model.model", "qualname": "generate_new_model_config", "kind": "function", "doc": "<p>generate random NasModel from scratch</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>ModelConfig of new NasModel</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cfg</span>,</span><span class=\"param\">\t<span class=\"n\">feature_shape</span>,</span><span class=\"param\">\t<span class=\"n\">targe_shape</span>,</span><span class=\"param\">\t<span class=\"n\">skeleton</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_width</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyIAAS</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">ModelConfig</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module", "modulename": "pyIAAS.model.module", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyIAAS.model.module.NasModule", "modulename": "pyIAAS.model.module", "qualname": "NasModule", "kind": "class", "doc": "<p>Base class for all neural network modules.</p>\n\n<p>Your models should also subclass this class.</p>\n\n<p>Modules can also contain other Modules, allowing to nest them in\na tree structure. You can assign the submodules as regular attributes::</p>\n\n<pre><code>import torch.nn as nn\nimport torch.nn.functional as F\n\nclass Model(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(1, 20, 5)\n        self.conv2 = nn.Conv2d(20, 20, 5)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        return F.relu(self.conv2(x))\n</code></pre>\n\n<p>Submodules assigned in this way will be registered, and will have their\nparameters converted too when you call <code>to()</code>, etc.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>As per the example above, an <code>__init__()</code> call to the parent class\nmust be made before assignment on the child.</p>\n\n</div>\n\n<p>:ivar training: Boolean represents whether this module is in training or\n                evaluation mode.\n:vartype training: bool</p>\n", "bases": "torch.nn.modules.module.Module"}, {"fullname": "pyIAAS.model.module.NasModule.__init__", "modulename": "pyIAAS.model.module", "qualname": "NasModule.__init__", "kind": "function", "doc": "<p>basic module composing neural networks.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cfg</strong>:  global configuration</li>\n<li><strong>name</strong>:  module name</li>\n<li><strong>input_shape</strong>:  input data shape</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">input_shape</span></span>)</span>"}, {"fullname": "pyIAAS.model.module.NasModule.is_max_level", "modulename": "pyIAAS.model.module", "qualname": "NasModule.is_max_level", "kind": "variable", "doc": "<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if this module is max width level,False otherwise</p>\n</blockquote>\n"}, {"fullname": "pyIAAS.model.module.NasModule.next_level", "modulename": "pyIAAS.model.module", "qualname": "NasModule.next_level", "kind": "variable", "doc": "<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>width of next level</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "pyIAAS.model.module.NasModule.get_level", "modulename": "pyIAAS.model.module", "qualname": "NasModule.get_level", "kind": "function", "doc": "<p>determine init level, return random level</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>max_width</strong>: </li>\n<li><strong>level_list</strong>:  all available level list</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>level</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">level_list</span>, </span><span class=\"param\"><span class=\"n\">max_width</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.NasModule.init_param", "modulename": "pyIAAS.model.module", "qualname": "NasModule.init_param", "kind": "function", "doc": "<p>initialize parameters of this module</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>max_width</strong>:  max width of neural layer</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">input_shape</span>, </span><span class=\"param\"><span class=\"n\">max_width</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.NasModule.forward", "modulename": "pyIAAS.model.module", "qualname": "NasModule.forward", "kind": "function", "doc": "<p>Defines the computation performed at every call.</p>\n\n<p>Should be overridden by all subclasses.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>Although the recipe for forward pass needs to be defined within\nthis function, one should call the <code>Module</code> instance afterwards\ninstead of this since the former takes care of running the\nregistered hooks while the latter silently ignores them.</p>\n\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.NasModule.on_param_end", "modulename": "pyIAAS.model.module", "qualname": "NasModule.on_param_end", "kind": "function", "doc": "<p>common operation after parameter setting ending, should call at\nthe end of each subclass's init_param method</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_shape</strong>:  input shape of this module</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">input_shape</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.NasModule.identity_module", "modulename": "pyIAAS.model.module", "qualname": "NasModule.identity_module", "kind": "function", "doc": "<p>generate an identity mapping module</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name: type of identity module</strong>: [dense, conv, rnn]</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>identity module (of class Modules)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">input_shape</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.NasModule.get_module_instance", "modulename": "pyIAAS.model.module", "qualname": "NasModule.get_module_instance", "kind": "function", "doc": "<p>generate a model instance once and use it for the rest of procedure</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>self._module_instance</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.NasModule.token", "modulename": "pyIAAS.model.module", "qualname": "NasModule.token", "kind": "variable", "doc": "<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>string type toke of this module</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "pyIAAS.model.module.NasModule.perform_wider_transformation_current", "modulename": "pyIAAS.model.module", "qualname": "NasModule.perform_wider_transformation_current", "kind": "function", "doc": "<p>generate a new wider module by the wider FPT(function preserving transformation)</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>mapping_g, scale_g</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> (&lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;list&#x27;&gt;):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.NasModule.perform_wider_transformation_next", "modulename": "pyIAAS.model.module", "qualname": "NasModule.perform_wider_transformation_next", "kind": "function", "doc": "<p>generate a new wider module by the wider FPT(function preserving transformation)</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>module of next level</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mapping_g</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">scale_g</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.NasModule.perform_prune_current", "modulename": "pyIAAS.model.module", "qualname": "NasModule.perform_prune_current", "kind": "function", "doc": "<p>prune module in current layer, implement this method in each submodule</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>module of next level</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.NasModule.perform_prune_next", "modulename": "pyIAAS.model.module", "qualname": "NasModule.perform_prune_next", "kind": "function", "doc": "<p>prune module follow previous layer, implement this method in each submodule</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>module of next level</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.NasModule.mask_sanity_check", "modulename": "pyIAAS.model.module", "qualname": "NasModule.mask_sanity_check", "kind": "function", "doc": "<p>check if mask makes all neuron deleted, if so, randomly keep 1 neuron to keep network\nwork properely</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.NasModule.default_sample_strategy", "modulename": "pyIAAS.model.module", "qualname": "NasModule.default_sample_strategy", "kind": "function", "doc": "<p>default sample strategy described in paper</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>original_size</strong>:  original layer width</li>\n<li><strong>new_size</strong>:  new layer width, we have new_size &gt;original_size</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>sampling sequence</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">original_size</span>, </span><span class=\"param\"><span class=\"n\">new_size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.RNNModule", "modulename": "pyIAAS.model.module", "qualname": "RNNModule", "kind": "class", "doc": "<p>Base class for all neural network modules.</p>\n\n<p>Your models should also subclass this class.</p>\n\n<p>Modules can also contain other Modules, allowing to nest them in\na tree structure. You can assign the submodules as regular attributes::</p>\n\n<pre><code>import torch.nn as nn\nimport torch.nn.functional as F\n\nclass Model(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(1, 20, 5)\n        self.conv2 = nn.Conv2d(20, 20, 5)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        return F.relu(self.conv2(x))\n</code></pre>\n\n<p>Submodules assigned in this way will be registered, and will have their\nparameters converted too when you call <code>to()</code>, etc.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>As per the example above, an <code>__init__()</code> call to the parent class\nmust be made before assignment on the child.</p>\n\n</div>\n\n<p>:ivar training: Boolean represents whether this module is in training or\n                evaluation mode.\n:vartype training: bool</p>\n", "bases": "NasModule"}, {"fullname": "pyIAAS.model.module.RNNModule.is_max_level", "modulename": "pyIAAS.model.module", "qualname": "RNNModule.is_max_level", "kind": "variable", "doc": "<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if this module is max width level,False otherwise</p>\n</blockquote>\n"}, {"fullname": "pyIAAS.model.module.RNNModule.init_param", "modulename": "pyIAAS.model.module", "qualname": "RNNModule.init_param", "kind": "function", "doc": "<p>initialize parameters of this module</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>max_width</strong>:  max width of neural layer</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">input_shape</span>, </span><span class=\"param\"><span class=\"n\">max_width</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.RNNModule.forward", "modulename": "pyIAAS.model.module", "qualname": "RNNModule.forward", "kind": "function", "doc": "<p>Defines the computation performed at every call.</p>\n\n<p>Should be overridden by all subclasses.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>Although the recipe for forward pass needs to be defined within\nthis function, one should call the <code>Module</code> instance afterwards\ninstead of this since the former takes care of running the\nregistered hooks while the latter silently ignores them.</p>\n\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.RNNModule.identity_module", "modulename": "pyIAAS.model.module", "qualname": "RNNModule.identity_module", "kind": "function", "doc": "<p>generate an identity mapping module</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name: type of identity module</strong>: [dense, conv, rnn]</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>identity module (of class Modules)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">input_shape</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.RNNModule.get_module_instance", "modulename": "pyIAAS.model.module", "qualname": "RNNModule.get_module_instance", "kind": "function", "doc": "<p>generate a model instance once and use it for the rest of procedure</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>self._module_instance</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.RNNModule.token", "modulename": "pyIAAS.model.module", "qualname": "RNNModule.token", "kind": "variable", "doc": "<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>string type toke of this module</p>\n</blockquote>\n"}, {"fullname": "pyIAAS.model.module.RNNModule.perform_wider_transformation_current", "modulename": "pyIAAS.model.module", "qualname": "RNNModule.perform_wider_transformation_current", "kind": "function", "doc": "<p>generate a new wider module by the wider FPT(function preserving transformation)</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>mapping_g, scale_g</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.RNNModule.perform_wider_transformation_next", "modulename": "pyIAAS.model.module", "qualname": "RNNModule.perform_wider_transformation_next", "kind": "function", "doc": "<p>generate a new wider module by the wider FPT(function preserving transformation)</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>module of next level</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mapping_g</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">scale_g</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.RNNModule.perform_prune_current", "modulename": "pyIAAS.model.module", "qualname": "RNNModule.perform_prune_current", "kind": "function", "doc": "<p>prune rnn layer by output neuron\n@param mask:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.RNNModule.perform_prune_next", "modulename": "pyIAAS.model.module", "qualname": "RNNModule.perform_prune_next", "kind": "function", "doc": "<p>prune module follow previous layer, implement this method in each submodule</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>module of next level</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.DenseModule", "modulename": "pyIAAS.model.module", "qualname": "DenseModule", "kind": "class", "doc": "<p>Base class for all neural network modules.</p>\n\n<p>Your models should also subclass this class.</p>\n\n<p>Modules can also contain other Modules, allowing to nest them in\na tree structure. You can assign the submodules as regular attributes::</p>\n\n<pre><code>import torch.nn as nn\nimport torch.nn.functional as F\n\nclass Model(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(1, 20, 5)\n        self.conv2 = nn.Conv2d(20, 20, 5)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        return F.relu(self.conv2(x))\n</code></pre>\n\n<p>Submodules assigned in this way will be registered, and will have their\nparameters converted too when you call <code>to()</code>, etc.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>As per the example above, an <code>__init__()</code> call to the parent class\nmust be made before assignment on the child.</p>\n\n</div>\n\n<p>:ivar training: Boolean represents whether this module is in training or\n                evaluation mode.\n:vartype training: bool</p>\n", "bases": "NasModule"}, {"fullname": "pyIAAS.model.module.DenseModule.perform_prune_current", "modulename": "pyIAAS.model.module", "qualname": "DenseModule.perform_prune_current", "kind": "function", "doc": "<p>prune dense layer by row, inplace operation</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mask</strong>:  mask of pruning, should be equal to row of weight</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.DenseModule.perform_prune_next", "modulename": "pyIAAS.model.module", "qualname": "DenseModule.perform_prune_next", "kind": "function", "doc": "<p>prune module follow previous layer, implement this method in each submodule</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>module of next level</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.DenseModule.is_max_level", "modulename": "pyIAAS.model.module", "qualname": "DenseModule.is_max_level", "kind": "variable", "doc": "<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if this module is max width level,False otherwise</p>\n</blockquote>\n"}, {"fullname": "pyIAAS.model.module.DenseModule.init_param", "modulename": "pyIAAS.model.module", "qualname": "DenseModule.init_param", "kind": "function", "doc": "<p>initialize parameters of this module</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>max_width</strong>:  max width of neural layer</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">input_shape</span>, </span><span class=\"param\"><span class=\"n\">max_width</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.DenseModule.forward", "modulename": "pyIAAS.model.module", "qualname": "DenseModule.forward", "kind": "function", "doc": "<p>Defines the computation performed at every call.</p>\n\n<p>Should be overridden by all subclasses.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>Although the recipe for forward pass needs to be defined within\nthis function, one should call the <code>Module</code> instance afterwards\ninstead of this since the former takes care of running the\nregistered hooks while the latter silently ignores them.</p>\n\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.DenseModule.identity_module", "modulename": "pyIAAS.model.module", "qualname": "DenseModule.identity_module", "kind": "function", "doc": "<p>generate an identity mapping module</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name: type of identity module</strong>: [dense, conv, rnn]</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>identity module (of class Modules)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">input_shape</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.DenseModule.get_module_instance", "modulename": "pyIAAS.model.module", "qualname": "DenseModule.get_module_instance", "kind": "function", "doc": "<p>generate a model instance once and use it for the rest of procedure</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>self._module_instance</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.DenseModule.token", "modulename": "pyIAAS.model.module", "qualname": "DenseModule.token", "kind": "variable", "doc": "<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>string type toke of this module</p>\n</blockquote>\n"}, {"fullname": "pyIAAS.model.module.DenseModule.perform_wider_transformation_current", "modulename": "pyIAAS.model.module", "qualname": "DenseModule.perform_wider_transformation_current", "kind": "function", "doc": "<p>generate a new wider module by the wider FPT(function preserving transformation)</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>mapping_g, scale_g</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.DenseModule.perform_wider_transformation_next", "modulename": "pyIAAS.model.module", "qualname": "DenseModule.perform_wider_transformation_next", "kind": "function", "doc": "<p>generate a new wider module by the wider FPT(function preserving transformation)</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>module of next level</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mapping_g</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">scale_g</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.ConvModule", "modulename": "pyIAAS.model.module", "qualname": "ConvModule", "kind": "class", "doc": "<p>Base class for all neural network modules.</p>\n\n<p>Your models should also subclass this class.</p>\n\n<p>Modules can also contain other Modules, allowing to nest them in\na tree structure. You can assign the submodules as regular attributes::</p>\n\n<pre><code>import torch.nn as nn\nimport torch.nn.functional as F\n\nclass Model(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(1, 20, 5)\n        self.conv2 = nn.Conv2d(20, 20, 5)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        return F.relu(self.conv2(x))\n</code></pre>\n\n<p>Submodules assigned in this way will be registered, and will have their\nparameters converted too when you call <code>to()</code>, etc.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>As per the example above, an <code>__init__()</code> call to the parent class\nmust be made before assignment on the child.</p>\n\n</div>\n\n<p>:ivar training: Boolean represents whether this module is in training or\n                evaluation mode.\n:vartype training: bool</p>\n", "bases": "NasModule"}, {"fullname": "pyIAAS.model.module.ConvModule.perform_prune_current", "modulename": "pyIAAS.model.module", "qualname": "ConvModule.perform_prune_current", "kind": "function", "doc": "<p>prune conv layer by feature maps, inplace operation</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mask</strong>:  mask of pruning, should be equal to out channels of module</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.ConvModule.perform_prune_next", "modulename": "pyIAAS.model.module", "qualname": "ConvModule.perform_prune_next", "kind": "function", "doc": "<p>prune module follow previous layer, implement this method in each submodule</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>module of next level</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.ConvModule.is_max_level", "modulename": "pyIAAS.model.module", "qualname": "ConvModule.is_max_level", "kind": "variable", "doc": "<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if this module is max width level,False otherwise</p>\n</blockquote>\n"}, {"fullname": "pyIAAS.model.module.ConvModule.init_param", "modulename": "pyIAAS.model.module", "qualname": "ConvModule.init_param", "kind": "function", "doc": "<p>initialize parameters of this module</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>max_width</strong>:  max width of neural layer</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">input_shape</span>, </span><span class=\"param\"><span class=\"n\">max_width</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.ConvModule.forward", "modulename": "pyIAAS.model.module", "qualname": "ConvModule.forward", "kind": "function", "doc": "<p>Defines the computation performed at every call.</p>\n\n<p>Should be overridden by all subclasses.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>Although the recipe for forward pass needs to be defined within\nthis function, one should call the <code>Module</code> instance afterwards\ninstead of this since the former takes care of running the\nregistered hooks while the latter silently ignores them.</p>\n\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.ConvModule.identity_module", "modulename": "pyIAAS.model.module", "qualname": "ConvModule.identity_module", "kind": "function", "doc": "<p>generate an identity mapping module</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name: type of identity module</strong>: [dense, conv, rnn]</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>identity module (of class Modules)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">input_shape</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.ConvModule.get_module_instance", "modulename": "pyIAAS.model.module", "qualname": "ConvModule.get_module_instance", "kind": "function", "doc": "<p>generate a model instance once and use it for the rest of procedure</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>self._module_instance</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.ConvModule.token", "modulename": "pyIAAS.model.module", "qualname": "ConvModule.token", "kind": "variable", "doc": "<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>string type toke of this module</p>\n</blockquote>\n"}, {"fullname": "pyIAAS.model.module.ConvModule.perform_wider_transformation_current", "modulename": "pyIAAS.model.module", "qualname": "ConvModule.perform_wider_transformation_current", "kind": "function", "doc": "<p>generate a new wider module by the wider FPT(function preserving transformation)</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>mapping_g, scale_g</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.ConvModule.perform_wider_transformation_next", "modulename": "pyIAAS.model.module", "qualname": "ConvModule.perform_wider_transformation_next", "kind": "function", "doc": "<p>generate a new wider module by the wider FPT(function preserving transformation)</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>module of next level</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mapping_g</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">scale_g</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.LSTMModule", "modulename": "pyIAAS.model.module", "qualname": "LSTMModule", "kind": "class", "doc": "<p>Base class for all neural network modules.</p>\n\n<p>Your models should also subclass this class.</p>\n\n<p>Modules can also contain other Modules, allowing to nest them in\na tree structure. You can assign the submodules as regular attributes::</p>\n\n<pre><code>import torch.nn as nn\nimport torch.nn.functional as F\n\nclass Model(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(1, 20, 5)\n        self.conv2 = nn.Conv2d(20, 20, 5)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        return F.relu(self.conv2(x))\n</code></pre>\n\n<p>Submodules assigned in this way will be registered, and will have their\nparameters converted too when you call <code>to()</code>, etc.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>As per the example above, an <code>__init__()</code> call to the parent class\nmust be made before assignment on the child.</p>\n\n</div>\n\n<p>:ivar training: Boolean represents whether this module is in training or\n                evaluation mode.\n:vartype training: bool</p>\n", "bases": "NasModule"}, {"fullname": "pyIAAS.model.module.LSTMModule.perform_prune_current", "modulename": "pyIAAS.model.module", "qualname": "LSTMModule.perform_prune_current", "kind": "function", "doc": "<p>prune rnn layer by output neuron\n@param mask:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.LSTMModule.perform_prune_next", "modulename": "pyIAAS.model.module", "qualname": "LSTMModule.perform_prune_next", "kind": "function", "doc": "<p>prune module follow previous layer, implement this method in each submodule</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>module of next level</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.LSTMModule.is_max_level", "modulename": "pyIAAS.model.module", "qualname": "LSTMModule.is_max_level", "kind": "variable", "doc": "<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if this module is max width level,False otherwise</p>\n</blockquote>\n"}, {"fullname": "pyIAAS.model.module.LSTMModule.init_param", "modulename": "pyIAAS.model.module", "qualname": "LSTMModule.init_param", "kind": "function", "doc": "<p>initialize parameters of this module</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>max_width</strong>:  max width of neural layer</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">input_shape</span>, </span><span class=\"param\"><span class=\"n\">max_width</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.LSTMModule.forward", "modulename": "pyIAAS.model.module", "qualname": "LSTMModule.forward", "kind": "function", "doc": "<p>Defines the computation performed at every call.</p>\n\n<p>Should be overridden by all subclasses.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>Although the recipe for forward pass needs to be defined within\nthis function, one should call the <code>Module</code> instance afterwards\ninstead of this since the former takes care of running the\nregistered hooks while the latter silently ignores them.</p>\n\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.LSTMModule.identity_module", "modulename": "pyIAAS.model.module", "qualname": "LSTMModule.identity_module", "kind": "function", "doc": "<p>generate an identity mapping module</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name: type of identity module</strong>: [dense, conv, rnn]</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>identity module (of class Modules)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">input_shape</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.LSTMModule.get_module_instance", "modulename": "pyIAAS.model.module", "qualname": "LSTMModule.get_module_instance", "kind": "function", "doc": "<p>generate a model instance once and use it for the rest of procedure</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>self._module_instance</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.LSTMModule.token", "modulename": "pyIAAS.model.module", "qualname": "LSTMModule.token", "kind": "variable", "doc": "<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>string type toke of this module</p>\n</blockquote>\n"}, {"fullname": "pyIAAS.model.module.LSTMModule.perform_wider_transformation_current", "modulename": "pyIAAS.model.module", "qualname": "LSTMModule.perform_wider_transformation_current", "kind": "function", "doc": "<p>generate a new wider module by the wider FPT(function preserving transformation)</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>mapping_g, scale_g</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.LSTMModule.perform_wider_transformation_next", "modulename": "pyIAAS.model.module", "qualname": "LSTMModule.perform_wider_transformation_next", "kind": "function", "doc": "<p>generate a new wider module by the wider FPT(function preserving transformation)</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>module of next level</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mapping_g</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">scale_g</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.TopK", "modulename": "pyIAAS.model.module", "qualname": "TopK", "kind": "class", "doc": "<p>Top-k Binarizer.\nComputes a binary mask M from a real value matrix S such that <code>M_{i,j} = 1</code> if and only if <code>S_{i,j}</code>\nis among the k% highest values of S.</p>\n\n<p>Implementation is inspired from:\n    <a href=\"https://github.com/allenai/hidden-networks\">https://github.com/allenai/hidden-networks</a>\n    What's hidden in a randomly weighted neural network?\n    Vivek Ramanujan<em>, Mitchell Wortsman</em>, Aniruddha Kembhavi, Ali Farhadi, Mohammad Rastegari</p>\n", "bases": "torch.autograd.function.Function"}, {"fullname": "pyIAAS.model.module.TopK.forward", "modulename": "pyIAAS.model.module", "qualname": "TopK.forward", "kind": "function", "doc": "<p>Args:\n    inputs (<code>torch.FloatTensor</code>)\n        The input matrix from which the binarizer computes the binary mask.\n    threshold (<code>float</code>)\n        The percentage of weights to keep (the rest is pruned).\n        <code>threshold</code> is a float between 0 and 1.\nReturns:\n    mask (<code>torch.FloatTensor</code>)\n        Binary matrix of the same size as <code>inputs</code> acting as a mask (1 - the associated weight is\n        retained, 0 - the associated weight is pruned).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ctx</span>,</span><span class=\"param\">\t<span class=\"n\">inputs</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">method</span> <span class=\"n\">tensor</span> <span class=\"n\">of</span> <span class=\"nb\">type</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.TopK.backward", "modulename": "pyIAAS.model.module", "qualname": "TopK.backward", "kind": "function", "doc": "<p>Defines a formula for differentiating the operation with backward mode\nautomatic differentiation (alias to the vjp function).</p>\n\n<p>This function is to be overridden by all subclasses.</p>\n\n<p>It must accept a context <code>ctx</code> as the first argument, followed by\nas many outputs as the <code>forward()</code> returned (None will be passed in\nfor non tensor outputs of the forward function),\nand it should return as many tensors, as there were inputs to\n<code>forward()</code>. Each argument is the gradient w.r.t the given output,\nand each returned value should be the gradient w.r.t. the\ncorresponding input. If an input is not a Tensor or is a Tensor not\nrequiring grads, you can just pass None as a gradient for that input.</p>\n\n<p>The context can be used to retrieve tensors saved during the forward\npass. It also has an attribute <code>ctx.needs_input_grad</code> as a tuple\nof booleans representing whether each input needs gradient. E.g.,\n<code>backward()</code> will have <code>ctx.needs_input_grad[0] = True</code> if the\nfirst input to <code>forward()</code> needs gradient computated w.r.t. the\noutput.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ctx</span>, </span><span class=\"param\"><span class=\"n\">gradOutput</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.ScoreAccumulator", "modulename": "pyIAAS.model.module", "qualname": "ScoreAccumulator", "kind": "class", "doc": "<p>Accumulate importance score while training. Do not change forward data</p>\n", "bases": "torch.autograd.function.Function"}, {"fullname": "pyIAAS.model.module.ScoreAccumulator.forward", "modulename": "pyIAAS.model.module", "qualname": "ScoreAccumulator.forward", "kind": "function", "doc": "<p>Performs the operation.</p>\n\n<p>This function is to be overridden by all subclasses.</p>\n\n<p>It must accept a context ctx as the first argument, followed by any\nnumber of arguments (tensors or other types).</p>\n\n<p>The context can be used to store arbitrary data that can be then\nretrieved during the backward pass. Tensors should not be stored\ndirectly on <code>ctx</code> (though this is not currently enforced for\nbackward compatibility). Instead, tensors should be saved either with\n<code>ctx.save_for_backward()</code> if they are intended to be used in\n<code>backward</code> (equivalently, <code>vjp</code>) or <code>ctx.save_for_forward()</code>\nif they are intended to be used for in <code>jvp</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ctx</span>, </span><span class=\"param\"><span class=\"n\">score</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.ScoreAccumulator.backward", "modulename": "pyIAAS.model.module", "qualname": "ScoreAccumulator.backward", "kind": "function", "doc": "<p>Defines a formula for differentiating the operation with backward mode\nautomatic differentiation (alias to the vjp function).</p>\n\n<p>This function is to be overridden by all subclasses.</p>\n\n<p>It must accept a context <code>ctx</code> as the first argument, followed by\nas many outputs as the <code>forward()</code> returned (None will be passed in\nfor non tensor outputs of the forward function),\nand it should return as many tensors, as there were inputs to\n<code>forward()</code>. Each argument is the gradient w.r.t the given output,\nand each returned value should be the gradient w.r.t. the\ncorresponding input. If an input is not a Tensor or is a Tensor not\nrequiring grads, you can just pass None as a gradient for that input.</p>\n\n<p>The context can be used to retrieve tensors saved during the forward\npass. It also has an attribute <code>ctx.needs_input_grad</code> as a tuple\nof booleans representing whether each input needs gradient. E.g.,\n<code>backward()</code> will have <code>ctx.needs_input_grad[0] = True</code> if the\nfirst input to <code>forward()</code> needs gradient computated w.r.t. the\noutput.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ctx</span>, </span><span class=\"param\"><span class=\"n\">gradOutput</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.NAS_RNN", "modulename": "pyIAAS.model.module", "qualname": "NAS_RNN", "kind": "class", "doc": "<p>Base class for all neural network modules.</p>\n\n<p>Your models should also subclass this class.</p>\n\n<p>Modules can also contain other Modules, allowing to nest them in\na tree structure. You can assign the submodules as regular attributes::</p>\n\n<pre><code>import torch.nn as nn\nimport torch.nn.functional as F\n\nclass Model(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(1, 20, 5)\n        self.conv2 = nn.Conv2d(20, 20, 5)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        return F.relu(self.conv2(x))\n</code></pre>\n\n<p>Submodules assigned in this way will be registered, and will have their\nparameters converted too when you call <code>to()</code>, etc.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>As per the example above, an <code>__init__()</code> call to the parent class\nmust be made before assignment on the child.</p>\n\n</div>\n\n<p>:ivar training: Boolean represents whether this module is in training or\n                evaluation mode.\n:vartype training: bool</p>\n", "bases": "torch.nn.modules.module.Module"}, {"fullname": "pyIAAS.model.module.NAS_RNN.__init__", "modulename": "pyIAAS.model.module", "qualname": "NAS_RNN.__init__", "kind": "function", "doc": "<p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pyIAAS.model.module.NAS_RNN.forward", "modulename": "pyIAAS.model.module", "qualname": "NAS_RNN.forward", "kind": "function", "doc": "<p>Defines the computation performed at every call.</p>\n\n<p>Should be overridden by all subclasses.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>Although the recipe for forward pass needs to be defined within\nthis function, one should call the <code>Module</code> instance afterwards\ninstead of this since the former takes care of running the\nregistered hooks while the latter silently ignores them.</p>\n\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.LSTMCell", "modulename": "pyIAAS.model.module", "qualname": "LSTMCell", "kind": "class", "doc": "<p>Base class for all neural network modules.</p>\n\n<p>Your models should also subclass this class.</p>\n\n<p>Modules can also contain other Modules, allowing to nest them in\na tree structure. You can assign the submodules as regular attributes::</p>\n\n<pre><code>import torch.nn as nn\nimport torch.nn.functional as F\n\nclass Model(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(1, 20, 5)\n        self.conv2 = nn.Conv2d(20, 20, 5)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        return F.relu(self.conv2(x))\n</code></pre>\n\n<p>Submodules assigned in this way will be registered, and will have their\nparameters converted too when you call <code>to()</code>, etc.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>As per the example above, an <code>__init__()</code> call to the parent class\nmust be made before assignment on the child.</p>\n\n</div>\n\n<p>:ivar training: Boolean represents whether this module is in training or\n                evaluation mode.\n:vartype training: bool</p>\n", "bases": "torch.nn.modules.module.Module"}, {"fullname": "pyIAAS.model.module.LSTMCell.__init__", "modulename": "pyIAAS.model.module", "qualname": "LSTMCell.__init__", "kind": "function", "doc": "<p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_size</span>, </span><span class=\"param\"><span class=\"n\">hidden_size</span></span>)</span>"}, {"fullname": "pyIAAS.model.module.LSTMCell.forward", "modulename": "pyIAAS.model.module", "qualname": "LSTMCell.forward", "kind": "function", "doc": "<p>Defines the computation performed at every call.</p>\n\n<p>Should be overridden by all subclasses.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>Although the recipe for forward pass needs to be defined within\nthis function, one should call the <code>Module</code> instance afterwards\ninstead of this since the former takes care of running the\nregistered hooks while the latter silently ignores them.</p>\n\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">h</span>, </span><span class=\"param\"><span class=\"n\">c</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.NAS_SLSTM", "modulename": "pyIAAS.model.module", "qualname": "NAS_SLSTM", "kind": "class", "doc": "<p>Base class for all neural network modules.</p>\n\n<p>Your models should also subclass this class.</p>\n\n<p>Modules can also contain other Modules, allowing to nest them in\na tree structure. You can assign the submodules as regular attributes::</p>\n\n<pre><code>import torch.nn as nn\nimport torch.nn.functional as F\n\nclass Model(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(1, 20, 5)\n        self.conv2 = nn.Conv2d(20, 20, 5)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        return F.relu(self.conv2(x))\n</code></pre>\n\n<p>Submodules assigned in this way will be registered, and will have their\nparameters converted too when you call <code>to()</code>, etc.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>As per the example above, an <code>__init__()</code> call to the parent class\nmust be made before assignment on the child.</p>\n\n</div>\n\n<p>:ivar training: Boolean represents whether this module is in training or\n                evaluation mode.\n:vartype training: bool</p>\n", "bases": "torch.nn.modules.module.Module"}, {"fullname": "pyIAAS.model.module.NAS_SLSTM.__init__", "modulename": "pyIAAS.model.module", "qualname": "NAS_SLSTM.__init__", "kind": "function", "doc": "<p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_size</span>, </span><span class=\"param\"><span class=\"n\">hidden_size</span></span>)</span>"}, {"fullname": "pyIAAS.model.module.NAS_SLSTM.reset_parameters", "modulename": "pyIAAS.model.module", "qualname": "NAS_SLSTM.reset_parameters", "kind": "function", "doc": "<p>follow implementation with pytorch</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.NAS_SLSTM.forward", "modulename": "pyIAAS.model.module", "qualname": "NAS_SLSTM.forward", "kind": "function", "doc": "<p>forward propagation\n@param x:  input of size [batch, seqlen, feature]\n@return: hidden state [batch, seqlen, feature]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.NAS_SLSTM.generate_identity", "modulename": "pyIAAS.model.module", "qualname": "NAS_SLSTM.generate_identity", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.generate_module", "modulename": "pyIAAS.model.module", "qualname": "generate_module", "kind": "function", "doc": "<p>generate module instance, this function binding module name to exact module class</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cfg</strong>:  global configuration</li>\n<li><strong>name</strong>:  name of module</li>\n<li><strong>input_shape</strong>:  input tensor shape</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>subclass of NAS_Module corresponding to name</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">input_shape</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyIAAS</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">NasModule</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.model.module.generate_from_skeleton", "modulename": "pyIAAS.model.module", "qualname": "generate_from_skeleton", "kind": "function", "doc": "<p>generate a list of module instance from skeleton list</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cfg</strong>:  global configuration</li>\n<li><strong>skeleton</strong>:  skeleton list of string specifying each layer's type</li>\n<li><strong>input_shape</strong>:  input data shape</li>\n<li><strong>max_width</strong>:  max width of neural layer</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of modules</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span>, </span><span class=\"param\"><span class=\"n\">skeleton</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">input_shape</span>, </span><span class=\"param\"><span class=\"n\">max_width</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.run", "modulename": "pyIAAS.run", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyIAAS.run.set_seed", "modulename": "pyIAAS.run", "qualname": "set_seed", "kind": "function", "doc": "<p>set random seed.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>seed</strong>:  seed number, int type</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">seed</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.run.save_rng_states", "modulename": "pyIAAS.run", "qualname": "save_rng_states", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span>, </span><span class=\"param\"><span class=\"n\">logger</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.run.try_load_rng_state", "modulename": "pyIAAS.run", "qualname": "try_load_rng_state", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span>, </span><span class=\"param\"><span class=\"n\">logger</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.run.run_search", "modulename": "pyIAAS.run", "qualname": "run_search", "kind": "function", "doc": "<p>Start point of pyIAAS framework, this function will process and read data\ncreate output directory and trigger the RL loop to search in the network space</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>test_ratio</strong>:  test data ration, float value in range (0,1)</li>\n<li><strong>config</strong>:  configuration file path(can be either absolute or relative to working directory) or Config object</li>\n<li><strong>input_file</strong>:  input csv file, all the column should be features and target name should be included in one feature. All data should be float values</li>\n<li><strong>target_name</strong>:  target value to predict</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span>, </span><span class=\"param\"><span class=\"n\">input_file</span>, </span><span class=\"param\"><span class=\"n\">target_name</span>, </span><span class=\"param\"><span class=\"n\">test_ratio</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.run.search_net", "modulename": "pyIAAS.run", "qualname": "search_net", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">logger_</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.run.run_predict", "modulename": "pyIAAS.run", "qualname": "run_predict", "kind": "function", "doc": "<p>do the prediction task on given input file and save result to prediction_file</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>config_file</strong>:  configuration file path, can be either absolute or relative to working directory</li>\n<li><strong>input_file</strong>:  input csv file, all the column should be features and target name should be included in one feature. All data should be float values</li>\n<li><strong>target_name</strong>:  target value to predict</li>\n<li><strong>output_dir</strong>:  output directory of previous search result</li>\n<li><strong>prediction_file</strong>:  file to save prediction result</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_file</span>, </span><span class=\"param\"><span class=\"n\">input_file</span>, </span><span class=\"param\"><span class=\"n\">target_name</span>, </span><span class=\"param\"><span class=\"n\">output_dir</span>, </span><span class=\"param\"><span class=\"n\">prediction_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.utils", "modulename": "pyIAAS.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyIAAS.utils.config", "modulename": "pyIAAS.utils.config", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyIAAS.utils.config.Config", "modulename": "pyIAAS.utils.config", "qualname": "Config", "kind": "class", "doc": "<p>Configuration file of the whole training process</p>\n"}, {"fullname": "pyIAAS.utils.config.Config.__init__", "modulename": "pyIAAS.utils.config", "qualname": "Config.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">nasConfig_file</span></span>)</span>"}, {"fullname": "pyIAAS.utils.config.Config.LOG_FILE", "modulename": "pyIAAS.utils.config", "qualname": "Config.LOG_FILE", "kind": "variable", "doc": "<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>log file path</p>\n</blockquote>\n"}, {"fullname": "pyIAAS.utils.config.Config.SQL_FILE", "modulename": "pyIAAS.utils.config", "qualname": "Config.SQL_FILE", "kind": "variable", "doc": "<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>log file path</p>\n</blockquote>\n"}, {"fullname": "pyIAAS.utils.config.Config.register_module", "modulename": "pyIAAS.utils.config", "qualname": "Config.register_module", "kind": "function", "doc": "<p>register module to global configuration</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  name of this module</li>\n<li><strong>module_cls</strong>:  module class</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">module_cls</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.utils.data_process", "modulename": "pyIAAS.utils.data_process", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyIAAS.utils.data_process.get_data", "modulename": "pyIAAS.utils.data_process", "qualname": "get_data", "kind": "function", "doc": "<p>preprocessing data from original data and return the numpy result\nif data is preprocessed before, return the previously stored result</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predict_length</strong>:  predicting future time from current time</li>\n<li><strong>target_name</strong>:  name of target value in CSV file</li>\n<li><strong>input_file</strong>:  input CSV data file</li>\n<li><strong>cache_dir</strong>:  middle cache dir to store arranged data</li>\n<li><strong>time_length</strong>:  length of time in feature</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>X,y is feature, target.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cache_dir</span>,</span><span class=\"param\">\t<span class=\"n\">input_file</span>,</span><span class=\"param\">\t<span class=\"n\">target_name</span>,</span><span class=\"param\">\t<span class=\"n\">time_length</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">predict_length</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> (&lt;class &#x27;numpy.ndarray&#x27;&gt;, &lt;class &#x27;numpy.ndarray&#x27;&gt;):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.utils.data_process.get_predict_data", "modulename": "pyIAAS.utils.data_process", "qualname": "get_predict_data", "kind": "function", "doc": "<p>preprocessing data from original data and return the numpy result of feature\nif data is preprocessed before, return the previously stored result</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>target_name</strong>:  name of target value in CSV file</li>\n<li><strong>input_file</strong>:  input CSV data file</li>\n<li><strong>time_length</strong>:  length of time in feature</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>X (feature)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_file</span>,</span><span class=\"param\">\t<span class=\"n\">target_name</span>,</span><span class=\"param\">\t<span class=\"n\">time_length</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> (&lt;class &#x27;numpy.ndarray&#x27;&gt;, &lt;class &#x27;numpy.ndarray&#x27;&gt;):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.utils.data_process.train_test_split", "modulename": "pyIAAS.utils.data_process", "qualname": "train_test_split", "kind": "function", "doc": "<p>If test_ratio is float in (0,1), split the whole dataset into train and test datasets and test dataset contains test_ration of whole dataset.\nelse test_ratio represent absolute size of test dataset</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:  feature data</li>\n<li><strong>y</strong>:  target data</li>\n<li><strong>test_ratio_or_size</strong>:  float value in range (0, 1), or int value of test dataset size</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>X_train, y_train, X_test, y_test</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">test_ratio_or_size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.utils.logger", "modulename": "pyIAAS.utils.logger", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyIAAS.utils.logger.get_logger", "modulename": "pyIAAS.utils.logger", "qualname": "get_logger", "kind": "function", "doc": "<p>get a logger</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  name of running instance</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">log_file</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">20</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.utils.object_dict", "modulename": "pyIAAS.utils.object_dict", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyIAAS.utils.object_dict.ObjectDict", "modulename": "pyIAAS.utils.object_dict", "qualname": "ObjectDict", "kind": "class", "doc": "<p></p>\n", "bases": "typing.Dict[str, typing.Any]"}, {"fullname": "pyIAAS.utils.sql_connector", "modulename": "pyIAAS.utils.sql_connector", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyIAAS.utils.sql_connector.get_or_create_connection", "modulename": "pyIAAS.utils.sql_connector", "qualname": "get_or_create_connection", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.utils.sql_connector.get_total_model_count", "modulename": "pyIAAS.utils.sql_connector", "qualname": "get_total_model_count", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.utils.sql_connector.insert_new_model_config", "modulename": "pyIAAS.utils.sql_connector", "qualname": "insert_new_model_config", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span>, </span><span class=\"param\"><span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">structure</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">prev_index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.utils.sql_connector.get_prev_record", "modulename": "pyIAAS.utils.sql_connector", "qualname": "get_prev_record", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span>, </span><span class=\"param\"><span class=\"n\">structure</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.utils.sql_connector.update_new_train_result", "modulename": "pyIAAS.utils.sql_connector", "qualname": "update_new_train_result", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span>, </span><span class=\"param\"><span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">train_time</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">loss</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyIAAS.utils.sql_connector.update_new_pool_state", "modulename": "pyIAAS.utils.sql_connector", "qualname": "update_new_pool_state", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span>, </span><span class=\"param\"><span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">pool_state</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();